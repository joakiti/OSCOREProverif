free c: channel.
free secureChannel:channel[private].
(*******************)
(* Everything COAP *)
(*******************)
type CoAP_request[data].
type CoAP_header[data].

type CoAP_version[data].
fun CoAP_versionOne(): CoAP_version.
type CoAP_confirmCode[data].
fun CoAP_confirmable(): CoAP_confirmCode.
fun CoAP_nonConfirm(): CoAP_confirmCode.
type CoAP_tokenlength[data].
fun CoAP_expectedLength(): CoAP_tokenlength.
type CoAP_requestCode[data].
fun CoAP_GETCode(): CoAP_requestCode.
fun CoAP_CHANGEDCode(): CoAP_requestCode.
type CoAP_messageID[data].

(*CoAP body begin*)
type CoAP_token[data].
type CoAP_options[data].
type CoAP_option[data].
fun CoAP_OSCORE_Option() : CoAP_option.
type CoAP_payload[data].
type CoAP_payload_encryted[data].
fun CoAP_encryptPayload() : CoAP_payload.

fun createHeader(CoAP_version, CoAP_confirmCode, CoAP_tokenlength, CoAP_requestCode, CoAP_messageID) : CoAP_header[data].
fun createRequest(CoAP_header, CoAP_token, CoAP_option, CoAP_payload) : CoAP_request[data].

(*******************)
(*Security Contexts*)
(*******************)
type sender_sequence_number.
type sender_context.
type sender_id.
type iv.
fun partial_iv(sender_sequence_number): iv.
type oscore_key.

fun getSenderContext(sender_id) : sender_context.
fun getSenderKey(sender_context) : oscore_key.

(********************************************)
(* AEAD - Encryption and authenticated data *)
(********************************************)
type oscore_version.
type aead_algorithm.
type nonce.

type additional_data.
fun AAD(oscore_version, aead_algorithm, sender_id, iv, CoAP_option) : additional_data.
fun aead_nonce(sender_id, iv, iv) : nonce.
type ptext.
fun plaintext(CoAP_requestCode, CoAP_payload) : ptext.
(*********************************************)
(*                    COSE                   *)
(*********************************************)

type COSE.
type COSE_ciphertext.
fun enc_COSE_ciphertext(oscore_key, nonce, ptext, additional_data): COSE_ciphertext.
reduc forall k:oscore_key, n:nonce, plain: ptext, add:additional_data; dec_COSE_ciphertext(enc_COSE_ciphertext(k,n,plain,add), k, n, add) = plain.
fun createCOSE(iv, sender_id, COSE_ciphertext) : COSE.
(* No model of the protected data - it's always empty*)
(* IV and Sender_ID are contained in the unprotected field*)
(* COSE_ciphertext is the ciphertext field*)


event here.
query event(here).


(*CHANGE THIS TO BE MORE GENERIC*)
free common_iv:iv[private].
free sid:sender_id[private].
free sender_key:oscore_key[private].
fun recipient_key(oscore_key):oscore_key.
free agreed_sender_sequence_number:sender_sequence_number[private].

let request_sender =
  let version = CoAP_versionOne() in
  let confirm = CoAP_nonConfirm() in
  let tlength = CoAP_expectedLength() in
  let dummyCode = CoAP_GETCode() in
  new messageID : CoAP_messageID;
  let header = createHeader(version, confirm, tlength, dummyCode, messageID) in
  new token : CoAP_token;
  let oscore_option = CoAP_OSCORE_Option() in
  new payload : CoAP_payload;
  let request = createRequest(header, token, oscore_option, payload) in
  out(secureChannel, request).

let oscore_princial =
  in(secureChannel, req: CoAP_request);
  let (header:CoAP_header, token:CoAP_token, OSCORE:CoAP_option, payload:CoAP_payload) = req in
  new add: additional_data;
  new secret_plaintext: ptext;
  let aeadnonce = aead_nonce(sid, common_iv, partial_iv(agreed_sender_sequence_number)) in
  let ciphertext = enc_COSE_ciphertext(sender_key, aeadnonce, secret_plaintext, add) in
  let COSE = createCOSE(partial_iv(agreed_sender_sequence_number), sid, ciphertext) in
  event here;
  out(c, COSE).

query attacker(new secret_plaintext).

process
  (!oscore_princial) | (!oscore_princial) | (!request_sender)
