free c: channel.
free requestChannel:channel[private].
(*******************)
(* Everything COAP *)
(*******************)
type CoAP_request[data].
type CoAP_header[data].

type CoAP_version[data].
fun CoAP_versionOne(): CoAP_version.
type CoAP_confirmCode[data].
fun CoAP_confirmable(): CoAP_confirmCode.
fun CoAP_nonConfirm(): CoAP_confirmCode.
type CoAP_tokenlength[data].
fun CoAP_expectedLength(): CoAP_tokenlength.
type CoAP_requestCode[data].
fun CoAP_GETCode(): CoAP_requestCode.
fun CoAP_CHANGEDCode(): CoAP_requestCode.
type CoAP_messageID[data].

(*CoAP body begin*)
type CoAP_token[data].
type CoAP_options[data].
type CoAP_option[data].
fun CoAP_OSCORE_Option() : CoAP_option.
type CoAP_payload[data].
type CoAP_payload_encryted[data].
fun CoAP_encryptPayload() : CoAP_payload.

fun createHeader(CoAP_version, CoAP_confirmCode, CoAP_tokenlength, CoAP_requestCode, CoAP_messageID) : CoAP_header.
fun createRequest(CoAP_header, CoAP_token, CoAP_option, CoAP_payload) : CoAP_request[data].

(*******************)
(*Security Contexts*)
(*******************)

type sender_context.
type sender_id.
type oscore_key.

fun getSenderContext(sender_id) : sender_context.
fun getSenderKey(sender_context) : oscore_key.

(********************************************)
(* AEAD - Encryption and authenticated data *)
(********************************************)
type oscore_version.
type aead_algorithm.
type request_kid.
type request_piv.

type additional_data.
fun AAD(oscore_version, aead_algorithm, request_kid, request_piv, CoAP_option) : additional_data.

type ptext.
fun plaintext() : ptext.

type sender_sequence_number.


event here.
query event(here).
let request_sender =
  let version = CoAP_versionOne() in
  let confirm = CoAP_nonConfirm() in
  let tlength = CoAP_expectedLength() in
  let dummyCode = CoAP_GETCode() in
  new messageID : CoAP_messageID;
  let header = createHeader(version, confirm, tlength, dummyCode, messageID) in
  new token : CoAP_token;
  let oscore_option = CoAP_OSCORE_Option() in
  new payload : CoAP_payload;
  let request = createRequest(header, token, oscore_option, payload) in
  out(requestChannel, request).

let oscore_princial =
  in(requestChannel, req: CoAP_request);
  event here;
  out(c, req).

query attacker(new req).

process
  (!oscore_princial) | (!oscore_princial) | (!request_sender)
